//////////////////////////
//                      //
//       AVITO69        //
//                      //
//////////////////////////
/// npm init
const fetch = require('node-fetch'); /// npm i --save node-fetch@2
const sqlite3 = require('sqlite3').verbose(); /// npm i --save-dev sqlite3
var TelegramBot = require('node-telegram-bot-api'); /// npm i --save node-telegram-bot-api
const QiwiBillPaymentsAPI = require('@qiwi/bill-payments-node-js-sdk'); /// npm i --save @qiwi/bill-payments-node-js-sdk

//////////////////////////
//                      //
//     –ë–ê–ó–ê –î–ê–ù–ù–´–•      //
//                      //
//////////////////////////
function createDatabase() {
  db = new sqlite3.Database('./AVITO69.db', (err) => {
    db.exec(`
      create table usersInfo (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        userID INTEGER,
        firstName TEXT,
        userName TEXT,
        dateRegistration TEXT,
        balance FLOAT,
        balanceDeposits TEXT,
        balanceCashout TEXT,
        tempBalanceDeposit TEXT,
        lastAction TEXT,
        earningType TEXT,
        promotionsCount INTEGER,
        earningTaskCount INTEGER,
        referalsCount INTEGER,
        tempPromotion TEXT,
        tempPromotionCount INTEGER,
        myReferal INTEGER,
        referalsEarning FLOAT,
        adminEarning FLOAT
      );

      create table promotionsInfo (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        userID INTEGER,
        userNamePromotion TEXT,
        promotionType TEXT,
        promotionCategory TEXT,
        datePromotion TEXT,
        title TEXT,
        nowEarning TEXT,
        url TEXT,
        count INTEGER,
        startCount INTEGER,
        nowCount INTEGER,
        promotionPrice FLOAT,
        executorPrice FLOAT,
        referalPrice FLOAT,
        referalIDPay INTEGER,
        usersComplited TEXT,
        status TEXT
      );
    `)
  })
}

//////////////////////////
//                      //
//      –ü–ï–†–ï–ú–ï–ù–ù–´–ï      //
//                      //
//////////////////////////
const publicKey = 'publicKey';
const SECRET_KEY = 'SECRET_KEY';
const qiwiApi = new QiwiBillPaymentsAPI(SECRET_KEY);
promotions = [{'info': {'text': 'üí• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - 2‚ÇΩ', 'type': 'followers', 'title': 'profileFollowers', 'executorTitle': '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å (?)', 'callback_data': 'profileFollowers*profileURL', 'promotionCountText': '–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç 1 –¥–æ 50!', 'minMaxCount': [1, 50], 'price': 2, 'executorPrice': 1, 'referalPrice': 0.15}}];
promotions_text = "";
promotions_buttons = [];
for (var i = 0; i < promotions.length; i++) {promotions_text += '\n' + promotions[i].info.text};
for (var i = 0; i < promotions.length; i++) {promotions_buttons.push([{text: promotions[i].info.text, callback_data: promotions[i].info.callback_data}])};
earning_types = [[{text: 'üë• –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'startEarning*followers'}]];
message_text = {
  /// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  'mainWindow': {'text': `üè† \`AVITO69\` - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –∏ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —Å–∞–π—Ç–µ avito!\n*–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é:*${promotions_text}`, 'img': 'https://tg.goh.su/AVITO69/mainWindow.jpg', 
    'buttons': [[{text: 'üìë –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'createPromotion'}, {text: 'üóÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'myPromotions'}], 
                [{text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', callback_data: 'earningType'}], 
                [{text: 'üë§ –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'myInformation'}]
               ]},
  /// –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
  'createPromotion': {'text': 'üìë –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É', 'img': 'https://tg.goh.su/AVITO69/createPromotion.jpg', 'buttons': promotions_buttons.concat([[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainWindow'}]])},
  'profileURL': {'text': 'üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å *Avito*', 'img': 'https://tg.goh.su/AVITO69/createPromotion.jpg', 'buttons': [[{text: 'üîó –ì–¥–µ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å', url: 'https://telegra.ph/Kak-najti-ssylku-na-profil-Avito-01-10'}], [{text: '‚ùé –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'cancelPromotion'}]]},
  'profileURLerror': {'text': 'üîó –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å *Avito!*\n(?)', 'img': 'https://tg.goh.su/AVITO69/createPromotion.jpg', 'buttons': [[{text: 'üîó –ì–¥–µ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å', url: 'https://telegra.ph/Kak-najti-ssylku-na-profil-Avito-01-10'}], [{text: '‚ùé –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'cancelPromotion'}]]},
  'promotionCount': {'text': 'üñã *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ* (?)', 'img': 'https://tg.goh.su/AVITO69/createPromotion.jpg', 'buttons': [[{text: '‚ùé –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'cancelPromotion'}]]},
  'promotionCountError': {'text': 'üñã –í—ã –æ—à–∏–±–ª–∏—Å—å *–ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', 'img': 'https://tg.goh.su/AVITO69/createPromotion.jpg', 'buttons': [[{text: '‚ùé –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'cancelPromotion'}]]},
  'promotionConfirm': {'text': 'üóÇ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑*\n- (?)\n- –°—Å—ã–ª–∫–∞: (?)\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *(?)*\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: *(?)*‚ÇΩ\n–í–∞—à –±–∞–ª–∞–Ω—Å: *(?)*‚ÇΩ', 'img': 'https://tg.goh.su/AVITO69/createPromotion.jpg', 'buttons': [[{text: '‚ùé –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'cancelPromotion'}]]},
  'depositBalance': {'text': 'üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!*\n(?)', 'img': 'https://tg.goh.su/AVITO69/depositBalance.jpg', 'buttons': [[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'cancelPromotion'}]]},
  'depositBalanceError': {'text': 'üí∞ *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*\n(?)', 'img': 'https://tg.goh.su/AVITO69/depositBalance.jpg', 'buttons': [[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'cancelPromotion'}]]},
  'startPromotionError': {'text': 'üóÇ *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*\n(?)', 'img': 'https://tg.goh.su/AVITO69/depositBalance.jpg', 'buttons': [[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'cancelPromotion'}]]},
  /// –ú–æ–∏ –∑–∞–∫–∞–∑—ã
  'myPromotions': {'text': 'üóÇ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã*\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: *(?)*\nA–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: *(?)*', 'img': 'https://tg.goh.su/AVITO69/myPromotions.jpg', 'buttons': [[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainWindow'}]]},
  'myPromotionInfo': {'text': 'üóÇ *–í–∞—à –∑–∞–∫–∞–∑* `#(?)`\n- (?)\n- –°—Å—ã–ª–∫–∞: (?)\n- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: *(?)*\n- –°—Ç–∞—Ç—É—Å: *(?)*', 'img': 'https://tg.goh.su/AVITO69/myPromotions.jpg', 'buttons': [[{text: 'üóÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'myPromotions'}]]},
  /// –ó–∞—Ä–∞–±–æ—Ç–æ–∫
  'earningType': {'text': 'üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞*', 'img': 'https://tg.goh.su/AVITO69/earningType.jpg', 'buttons': earning_types.concat([[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainWindow'}]])},
  'startEarning': {'text': 'üí∞ (?)\n–í–∞—à –±–∞–ª–∞–Ω—Å: (?)‚ÇΩ\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ: (?)‚ÇΩ', 'img': 'https://tg.goh.su/AVITO69/earningType.jpg', 'buttons': [[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainWindow'}]]},
  'earningError': {'text': 'üí∞ (?)', 'img': 'https://tg.goh.su/AVITO69/earningType.jpg', 'buttons': [[{text: 'üìë –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π', callback_data: 'startEarning'}], [{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainWindow'}]]},
  /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  'myInformation': {'text': 'üë§ *–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n–ë–∞–ª–∞–Ω—Å: *(?)‚ÇΩ*\n–°–æ–∑–¥–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: *(?)*\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: *(?)*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *(?)*\n–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *(?)‚ÇΩ*\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: `(?)`', 'img': 'https://tg.goh.su/AVITO69/myInformation.jpg', 'buttons': [[{text: 'üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤', callback_data: 'cashout*qiwi'}], [{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainWindow'}]]},
  'cashout': {'text': 'üí∞ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n(?)', 'img': 'https://tg.goh.su/AVITO69/cashout.jpg', 'buttons': [[{text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'mainWindow'}]]}
}

//////////////////////////
//                      //
//  –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê  //
//                      //
//////////////////////////
async function fetch_request(url, method, headers, body, type, useragent) {
  function jsonConcat(o1, o2) {
    for (var key in o2) o1[key] = o2[key];
    return o1;
  }
  value = {"status": "error", "data": "invalid_request"};
  fetch_data = {
    method: method,
    headers: jsonConcat({
      'accept': 'application/json, text/plain, */*',
      'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6,zh;q=0.5,tr;q=0.4',
      'x-requested-with': 'XMLHttpRequest',
      'user-agent': useragent
    }, headers)
  }
  if (method == "POST") fetch_data["body"] = body;
  await fetch(url, fetch_data).then(async function(data) {
    if (type == "text") return data.text();
    else if (type == "json") return data.json();
  }).then(async function(data) {
    value = {"status": "success", "data": data};
  }).catch(async function(data){
    data = data.toString();
    if (data.indexOf("Failed to fetch") != -1) value = {"status": "error", "data": "invalid_url"};
    else if (data.indexOf("SyntaxError") != -1) value = {"status": "error", "data": "invalid_request"};
    else value = {"status": "error", "data": data};
  });
  return value;
}

async function getUser(url) {
  headers = {'cookie': 'cookie AVITO'};
  request = await fetch_request(`https://m.avito.ru/api/2/user/${url}/extended-profile?key=af0deccbgcgidddjgnvljitntccdduijhdinfgjgfjir`, "GET", headers, "{}", "json", "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Mobile Safari/537.36").then(async function(request){return request});
  if (request.status == "success") {
    data = request.data;
    if (data.status == "ok") {
      if (data.result.widgets[0].value.subscribeInfo !== undefined) {
        if (data.result.widgets[0].value.subscribeInfo.subscribers !== undefined) {
          return [data.result.data.username, data.result.widgets[0].value.subscribeInfo.subscribers.title]
        } else return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!";
      } else return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!";
    } else if (data.status == "not-found") return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!";
    else if (data.status == "placeholder") return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ `placeholder`!";
    else if (data.status == "forbidden") return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ `–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞`!";
    else return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ${JSON.stringify(data)}!`;
  } else return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ${request.status}!`;
}

//////////////////////////
//                      //
// –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô  //
//                      //
//////////////////////////
async function sendMessage(chatId, msgId, action, data='') {
  textReplace = '';
  addButtons = [];
	if (action.indexOf('*') != -1) {
    //////////////////////////
    //                      //
    // –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –î–ê–ù. //
    //                      //
    //////////////////////////
    if (data == '') {
      if (action.indexOf('*depositBalance') != -1) {
        /// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        actions = 'depositBalance';
        textReplace = ['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º –æ—Ç 15‚ÇΩ!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—É–º–º—É'];
      } else if (action.indexOf('*checkDepositBalance') != -1) {
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        row = await db_all(`SELECT balance, tempBalanceDeposit, balanceDeposits FROM usersInfo WHERE userID = ${chatId}`).then(function(row) {return row});
        data = await qiwiApi.getBillInfo(row[0].tempBalanceDeposit.toString()).then(function(data) {return data}).catch(function(error) {return 'error'})
        if (data != 'error') {
          if (data.status.value == "PAID") { 
            if (data.amount.currency == "RUB") {
              await db.run("UPDATE usersInfo SET balance=?, balanceDeposits=?, tempBalanceDeposit=? WHERE userID=?", [row[0].balance + Number(data.amount.value), `${row[0].balanceDeposits}[${Number(data.amount.value)} - ${new Date().toString()}] `, '', chatId], function(err,rows){});
              actions = action = action.split('*')[0];     
            } else {
              actions = action = 'depositBalanceError';
              textReplace = ['–°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–µ –≤ —Ä—É–±–ª—è—Ö!\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @RostikLucky –∑–∞ –ø–æ–º–æ—â—å—é'];
            }
          } else { 
            actions = action = 'depositBalanceError';
            textReplace = ['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑!'];
            addButtons = [[{text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: action.split('*')[0]+'*checkDepositBalance'}]];
          }
        } else {
          actions = action = 'depositBalanceError';
          textReplace = ['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑!'];
          addButtons = [[{text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: action.split('*')[0]+'*checkDepositBalance'}]];
        }
      } else if (action.indexOf('myPromotionInfo*') != -1) {
        /// –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ 
        actions = 'myPromotionInfo';
        row = await db_all(`SELECT promotionType, userNamePromotion, url, nowCount, startCount, count, status FROM promotionsInfo WHERE userID = ${chatId} and id = ${action.split('*')[1]}`).then(function(row) {return row});
        textReplace = [action.split('*')[1], row[0].promotionType, `[${row[0].userNamePromotion}](${row[0].url})`, `${row[0].nowCount - row[0].startCount} –∏–∑ ${row[0].count}`, row[0].status];
        if (row[0].status == '–∞–∫—Ç–∏–≤–Ω–æ') addButtons = [[{text: 'üîπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å–ª—É–≥—É', callback_data: `myPromotionStop*${action.split('*')[1]}`}]];
      } else if (action.indexOf('myPromotionStop*') != -1) {
        /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å–ª—É–≥—É
        actions = `mainWindow`;
        row = await db_all(`SELECT count, startCount, nowCount, promotionPrice FROM promotionsInfo WHERE id = ${action.split('*')[1]}`).then(function(row) {return row});
        balance = (row[0].count - (row[0].nowCount - row[0].startCount)) * row[0].promotionPrice;
        row = await db_all(`SELECT balance FROM usersInfo WHERE userID = ${chatId}`).then(function(row) {return row});
        await db.run("UPDATE usersInfo SET balance=? WHERE userID=?", [row[0].balance + balance, chatId],function(err,rows){});
        await db.run("UPDATE promotionsInfo SET status=? WHERE userID=? and id=?", ['–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', chatId, action.split('*')[1]],function(err,rows){});
      } else if (action.indexOf('startEarning*') != -1) {
        /// –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
        await db.run("UPDATE usersInfo SET earningType=? WHERE userID=?", [action.split('*')[1], chatId],function(err,rows){});
        actions = action = 'startEarning';
      } else if (action.indexOf('checkTask*') != -1) {
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        taskId = action.split('*')[1];
        row = await db_all(`SELECT url, nowEarning, nowCount, startCount, count, status, promotionPrice, usersComplited, referalIDPay, referalPrice, executorPrice FROM promotionsInfo WHERE id=${taskId}`).then(function(row) {return row});
        await db.run("UPDATE promotionsInfo SET nowEarning=? WHERE id=?", ['', taskId],function(err,rows){});
        if (Number(row[0].nowEarning.split('[')[0]) == chatId) {
          if (row[0].status == '–∞–∫—Ç–∏–≤–Ω–æ') {
            user_info = await getUser(row[0].url.split('/')[row[0].url.split('/').length - 2]);
            nowCount = Number(user_info[1]);
            if (user_info.length == 2) {
              if (nowCount > row[0].nowCount) {
                await db.run("UPDATE promotionsInfo SET nowCount=? WHERE id=?", [nowCount, taskId],function(err,rows){});
                /// –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                if (nowCount - row[0].startCount >= row[0].count) {await db.run("UPDATE promotionsInfo SET status=? WHERE id=?", ['–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', taskId],function(err,rows){})}
                /// –ó–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
                rowUser = await db_all(`SELECT balance, myReferal, earningTaskCount FROM usersInfo WHERE userID=${chatId}`).then(function(row) {return row});
                await db.run("UPDATE usersInfo SET balance=?, earningTaskCount=? WHERE userID=?", [(rowUser[0].balance + row[0].executorPrice).toFixed(2), rowUser[0].earningTaskCount + 1, chatId],function(err,rows){});
                adminEarning = row[0].promotionPrice - row[0].executorPrice;
                /// –û–ø–ª–∞—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—É
                if (rowUser[0].myReferal != "") {
                  rowUserTemp = await db_all(`SELECT balance, referalsEarning FROM usersInfo WHERE userID=${rowUser[0].myReferal}`).then(function(row) {return row});
                  await db.run("UPDATE usersInfo SET balance=?, referalsEarning=? WHERE userID=?", [(rowUserTemp[0].balance + row[0].referalPrice).toFixed(2), (rowUserTemp[0].referalsEarning + row[0].referalPrice).toFixed(2), rowUser[0].myReferal],function(err,rows){});
                  adminEarning = adminEarning - row[0].referalPrice;
                }
                if (row[0].referalIDPay != "") {
                  rowUserTemp = await db_all(`SELECT balance, referalsEarning FROM usersInfo WHERE userID=${row[0].referalIDPay}`).then(function(row) {return row});
                  await db.run("UPDATE usersInfo SET balance=?, referalsEarning=? WHERE userID=?", [(rowUserTemp[0].balance + row[0].referalPrice).toFixed(2), (rowUserTemp[0].referalsEarning + row[0].referalPrice).toFixed(2), row[0].referalIDPay],function(err,rows){});
                  adminEarning = adminEarning - row[0].referalPrice;
                }
                rowUserTemp = await db_all(`SELECT balance, adminEarning FROM usersInfo WHERE userID=313997284`).then(function(row) {return row});
                await db.run("UPDATE usersInfo SET balance=?, adminEarning=? WHERE userID=?", [(rowUserTemp[0].balance + adminEarning).toFixed(2), (rowUserTemp[0].adminEarning + adminEarning).toFixed(2), 313997284],function(err,rows){});
                await db.run("UPDATE promotionsInfo SET usersComplited=? WHERE id=?", [row[0].usersComplited + `${chatId}[–≤—ã–ø–æ–ª–Ω–∏–ª] `, taskId],function(err,rows){});
                actions = action = 'startEarning';
              } else {
                /// –ù–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
                await db.run("UPDATE promotionsInfo SET usersComplited=? WHERE id=?", [row[0].usersComplited + `${chatId}[–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª] `, taskId],function(err,rows){});
                actions = 'earningError';
                textReplace = ['–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ!'];
              }
            } else {
              /// –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
              await db.run("UPDATE promotionsInfo SET usersComplited=? WHERE id=?", [row[0].usersComplited + `${chatId}[–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ] `, taskId],function(err,rows){});
              actions = 'earningError';
              textReplace = ['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è!'];
            }
          } else {
            actions = 'earningError';
            textReplace = ['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!'];
          }
        } else {
          actions = 'earningError';
          textReplace = ['–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 40 —Å–µ–∫—É–Ω–¥! –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–µ–µ'];
          await db.run("UPDATE promotionsInfo SET usersComplited=? WHERE id=?", [row[0].usersComplited + `${chatId}[40 —Å–µ–∫] `, taskId],function(err,rows){});
        }
      } else if (action.indexOf('nextTask*') != -1) {
        /// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        taskId = action.split('*')[1];
        await db.run("UPDATE promotionsInfo SET nowEarning=? WHERE id=?", ['', taskId],function(err,rows){});
        row = await db_all(`SELECT usersComplited FROM promotionsInfo WHERE id=${taskId}`).then(function(row) {return row});
        await db.run("UPDATE promotionsInfo SET usersComplited=? WHERE id=?", [row[0].usersComplited + `${chatId}[–ø—Ä–æ–ø—É—Å—Ç–∏–ª] `, taskId],function(err,rows){});
        actions = action = 'startEarning';
      } else if (action.indexOf('cashout*') != -1) {
        /// –í–≤–æ–¥ –ö–ò–í–ò –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        temp_action = action.split("*")[1];
        if (temp_action == 'qiwi') textReplace = ['–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞!'];
        actions = 'cashout';
      } else actions = action.split("*")[1];
    } else if (action.indexOf('*profileURL') != -1) {
      /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
      profileURL = '';
      if (data.indexOf("avito.ru/user/") != -1) profileURL = (data.split("avito.ru/user/")[1].indexOf("/") != -1) ? data.split("avito.ru/user/")[1].split("/")[0] : data.split("avito.ru/user/")[1];
      if (profileURL == '') {
        actions = 'profileURLerror';
        textReplace = ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'];
      } else {
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        user_info = await getUser(profileURL);
        if (user_info.length == 2) {
          await db.run("UPDATE usersInfo SET tempPromotion=? WHERE userID=?", [`${action.split('*')[0]}*https://avito.ru/user/${profileURL}/profile*${user_info[0]}*${user_info[1]}`, chatId],function(err,rows){});
          actions = 'promotionCount';
          action = `${action.split('*')[0]}*promotionCount`;
          for (var i = 0; i < promotions.length; i++) {if (promotions[i].info.title == action.split('*')[0]) textReplace = [promotions[i].info.promotionCountText]}
        } else {
          actions = 'profileURLerror';
          textReplace = [user_info];
        }
      }
    } else if (action.indexOf('*promotionCount') != -1) {
      /// –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
      data = Number(data);
      for (var i = 0; i < promotions.length; i++) {if (promotions[i].info.title == action.split('*')[0]) min_max = promotions[i].info.minMaxCount}
      if (!isNaN(data) && data >= min_max[0] && data <= min_max[1]) {
        actions = action = 'promotionConfirm';
        await db.run("UPDATE usersInfo SET tempPromotionCount=? WHERE userID=?", [data, chatId], function(err,rows){});
      } else actions = 'promotionCountError';
    } else if (action.indexOf('*depositBalance') != -1) {
      /// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      data = Number(data);
      if (!isNaN(data) && data >= 15 && data <= 500) {
        data = Math.floor(data);
        actions = 'depositBalance';
        const params = {
          publicKey,
          amount: data,
          billId: qiwiApi.generateId(),
          comment: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ AVITO69 –Ω–∞ ${data} —Ä—É–±–ª–µ–π`,
          currency: "RUB",
          successUrl: `https://t.me/AVITO69_bot?start=checkDepositBalance`
        };
        const link = await qiwiApi.createBill(params.billId, params).then(function(val){return val}).catch(function(err){console.log(err)});
        if (link !== undefined) {
          await db.run("UPDATE usersInfo SET tempBalanceDeposit=? WHERE userID=?", [params.billId, chatId], function(err,rows){});
          textReplace = [`–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ ${data}‚ÇΩ`];
          addButtons = [[{text: 'ü•ù –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ QIWI', url: link.payUrl}], [{text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'promotionConfirm*checkDepositBalance'}]];
          action = 'promotionConfirm*checkDepositBalance';
        } else {
          textReplace = [`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑!`];
          addButtons = [[{text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'promotionConfirm*depositBalance'}]];
        }
      } else {
        actions = 'depositBalance';
        textReplace = ['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º –æ—Ç 15‚ÇΩ!'];
      }
    } else if (action.indexOf('*qiwi') != -1) {
      /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä –ö–ò–í–ò
      data = data.replaceAll('+', '');
      data = Number(data);
      if (!isNaN(data) && data.toString().length >= 10 && data.toString().length <= 12) {
        row = await db_all(`SELECT balance, balanceCashout FROM usersInfo WHERE userID=${chatId}`).then(function(row) {return row});
        if (row[0].balance >= 15) {
          await db.run("UPDATE usersInfo SET balance=?, balanceCashout=? WHERE userID=?", [0, `${data}[–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã][${new Date().toString()}] `, chatId],function(err,rows){});
          textReplace = [`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –≤—ã–≤–æ–¥ ${row[0].balance}‚ÇΩ`];
        } else textReplace = ['–í—ã–≤–æ–¥ –º–∏–Ω–∏–º—É–º –æ—Ç 15‚ÇΩ!'];
      } else textReplace = ['–í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'];
      actions = 'cashout';
    }
    
    //////////////////////////
    //                      //
    //  –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ô–°–¢–í–ò–ô  //
    //                      //
    //////////////////////////
    if (action == 'promotionConfirm') {
      /// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
      await db_all(`SELECT tempPromotion, tempPromotionCount, balance FROM usersInfo WHERE userID = ${chatId}`).then(function(row) {
        for (var i = 0; i < promotions.length; i++) {
          if (promotions[i].info.title == row[0].tempPromotion.split('*')[0]) {
            promotionName = promotions[i].info.text;
            promotionPrice = promotions[i].info.price;
          }
        }
        textReplace = [promotionName, `[${row[0].tempPromotion.split('*')[2]}](${row[0].tempPromotion.split('*')[1]})`, row[0].tempPromotionCount, promotionPrice * row[0].tempPromotionCount, row[0].balance];
        if (promotionPrice * row[0].tempPromotionCount <= row[0].balance) addButtons = [[{text: 'üëç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'startPromotion'}]];
        else addButtons = [[{text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'promotionConfirm*depositBalance'}]];
      })
    }
	} else {
    actions = action;
    //////////////////////////
    //                      //
    //   –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö   //
    //                      //
    //////////////////////////
    /// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
    if (action == 'cancelPromotion') {
      await db.run("UPDATE usersInfo SET tempPromotion=?, tempPromotionCount=? WHERE userID=?", ['', '', chatId],function(err,rows){});
      actions = action = 'mainWindow';
    } 

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
    if (action == 'startPromotion') {
      row = await db_all(`SELECT tempPromotion, tempPromotionCount, balance, myReferal, promotionsCount FROM usersInfo WHERE userID = ${chatId}`).then(function(row) {return row});
      for (var i = 0; i < promotions.length; i++) {
        if (promotions[i].info.title == row[0].tempPromotion.split('*')[0]) {
          promotionPrice = promotions[i].info.price;
          executorPrice = promotions[i].info.executorPrice;
          executorTitle = promotions[i].info.executorTitle;
          referalPrice = promotions[i].info.referalPrice;
          promotionType = promotions[i].info.text;
          categoryType = promotions[i].info.type;
        }
      }
      if (promotionPrice * row[0].tempPromotionCount <= row[0].balance) {
        rowInfo = await db_all(`SELECT id FROM promotionsInfo WHERE url = '${row[0].tempPromotion.split("*")[1]}' and status='–∞–∫—Ç–∏–≤–Ω–æ'`).then(function(row) {return row});
        if (rowInfo.length == 0) {
          await db.run(`INSERT INTO promotionsInfo (userID, datePromotion, title, url, count, startCount, nowCount, promotionPrice, executorPrice, referalPrice, referalIDPay, usersComplited, status, userNamePromotion, promotionType, promotionCategory, nowEarning) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`, [chatId, new Date().toString(), executorTitle.replace('(?)', row[0].tempPromotion.split("*")[2]), row[0].tempPromotion.split("*")[1], row[0].tempPromotionCount, row[0].tempPromotion.split("*")[3], row[0].tempPromotion.split("*")[3], promotionPrice, executorPrice, referalPrice, row[0].myReferal, `${chatId}[—Å–æ–∑–¥–∞–ª] `, '–∞–∫—Ç–∏–≤–Ω–æ', row[0].tempPromotion.split("*")[2], promotionType, categoryType, ''],function(err,rows){});
          await db.run("UPDATE usersInfo SET tempPromotion=?, tempPromotionCount=?, promotionsCount=?, balance=? WHERE userID=?", ['', '', row[0].promotionsCount + 1, row[0].balance - (promotionPrice * row[0].tempPromotionCount), chatId],function(err,rows){});
          actions = action = 'myPromotions';
        } else {
          await db.run("UPDATE usersInfo SET tempPromotion=?, tempPromotionCount=? WHERE userID=?", ['', '', chatId],function(err,rows){});
          actions = action = 'startPromotionError';
          textReplace = ['*–î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏*'];
        }
      } else {
        await db.run("UPDATE usersInfo SET tempPromotion=?, tempPromotionCount=? WHERE userID=?", ['', '', chatId],function(err,rows){});
        actions = action = 'startPromotionError';
        textReplace = ['*–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*'];
      }
    }

    /// –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
    if (action == 'myPromotions') {
      row = await db_all(`SELECT id, status FROM promotionsInfo WHERE userID = ${chatId}`).then(function(row) {return row})
      promotionsActive = [];
      promotionsStop = [];
      for (var i = 0; i < row.length; i++) {
        if (row[i].status == '–∞–∫—Ç–∏–≤–Ω–æ') promotionsActive.push([{text: `üî∏ –ó–∞–∫–∞–∑ #${row[i].id}`, callback_data: `myPromotionInfo*${row[i].id}`}]);
        else promotionsStop.push([{text: `üîπ –ó–∞–∫–∞–∑ #${row[i].id}`, callback_data: `myPromotionInfo*${row[i].id}`}])
      }
      textReplace = [promotionsActive.length + promotionsStop.length, promotionsActive.length];
      addButtons = promotionsActive.concat(promotionsStop);
    } 

    /// –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (action == 'myInformation') {
      row = await db_all(`SELECT balance, promotionsCount, earningTaskCount, referalsEarning, referalsCount FROM usersInfo WHERE userID = ${chatId}`).then(function(row) {return row})
      textReplace = [row[0].balance, row[0].promotionsCount, row[0].earningTaskCount, row[0].referalsCount, row[0].referalsEarning, `@AVITO69_bot?start=${chatId}`];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  if (action == 'startEarning') {
    rowUser = await db_all(`SELECT earningType, balance FROM usersInfo WHERE userID = ${chatId}`).then(function(row) {return row});
    row = await db_all(`SELECT id, title, url, executorPrice, nowEarning, nowCount, usersComplited FROM promotionsInfo WHERE instr(\`usersComplited\`, '${chatId}[') = 0 and status = '–∞–∫—Ç–∏–≤–Ω–æ' and promotionCategory = '${rowUser[0].earningType}'`).then(function(row) {return row});
    taskId = null;
    for (var i = 0; i < row.length; i++) {
      if (row[i].nowEarning == "") {
        taskId = i;
        break
      } else {
        if (new Date(row[i].nowEarning.split('[')[1].split(']')[0]).getTime() + 40000 <= new Date().getTime()) {
          taskId = i;
          break
        }
      }
    }
    if (row.length > 0 && taskId == null) {
      actions = 'earningError';
      textReplace = ['–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å, –Ω–æ –∏—Ö —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!'];
    } else {
      if (taskId == null) {
        actions = 'earningError';
        textReplace = ['–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!'];
      } else {
        user_info = await getUser(row[taskId].url.split('/')[row[taskId].url.split('/').length - 2]);
        if (user_info.length == 2) {
          await db.run("UPDATE promotionsInfo SET nowEarning=?, nowCount=? WHERE id=?", [`${chatId}[${new Date().toString()}]`, user_info[1], row[taskId].id],function(err,rows){});
          textReplace = [row[taskId].title, rowUser[0].balance, row[taskId].executorPrice];
          addButtons = [[{text: 'üíº –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', url: row[taskId].url}], [{text: 'üó≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: `checkTask*${row[taskId].id}`}], [{text: 'üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: `nextTask*${row[taskId].id}`}]];
        } else {
          await db.run("UPDATE promotionsInfo SET usersComplited=? WHERE id=?", [row[taskId].usersComplited + `${chatId}[–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ] `, row[taskId].id],function(err,rows){});
          actions = 'earningError';
          textReplace = ['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑—å–º–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ!'];
        }
      }
    }
  }

	/// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (message_text[actions].img !== undefined) {
  	telegramBot.sendPhoto(chatId, message_text[actions].img, {
  		caption: replaceText(message_text[actions].text, textReplace), 
  		reply_markup: {inline_keyboard: addButtons.concat(message_text[actions].buttons)}, 
  		parse_mode: 'Markdown'
  	}).then(function(msg){
      telegramBot.deleteMessage(chatId, msgId).then(function(msg){}).catch(function(err){console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${chatId} - ${err}`)});
      if (data != '') telegramBot.deleteMessage(chatId, msgId-1).then(function(msg){}).catch(function(err){console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${chatId} - ${err}`)});
      db.run("UPDATE usersInfo SET lastAction=? WHERE userId=?", [action, chatId],function(err,rows){});
    }).catch(function(err){console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${chatId} - ${err}`)});
  }

  /// –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç (?)
  function replaceText(text, data) {
    if (data != '') {
      for (var i = 0; i < data.length; i++) {
        text = text.replace('(?)', data[i]);
      }
    }
    return text
  }
}

//////////////////////////
//                      //
//   –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î   //
//                      //
//////////////////////////
async function db_all(query) {
  return new Promise(function(resolve,reject) {
    db.all(query, function(err,rows) {
      if (err) return reject(err);
      resolve(rows);
    })
  })
}

db = new sqlite3.Database('./AVITO69.db', sqlite3.OPEN_READWRITE, (err) => {
  if (err) {
    console.log('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ', err);
    createDatabase();
  } else {
    telegramBot = new TelegramBot('KEY', {polling: true});
    //////////////////////////
    //                      //
    //      –û–ë–†–ê–ë–û–¢–ö–ê       //
    //                      //
    //////////////////////////
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegramBot.on('message', function (msg) {
      db.serialize(() => {
        db.all(`SELECT userID, lastAction FROM usersInfo WHERE userID = ${msg.chat.id}`, (err, row) => {
          if (row.length > 0) {
            text = msg.text;
            if (msg.text !== undefined) if (msg.text.indexOf('checkDepositBalance') != -1) text = '';
            /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (row[0].lastAction.indexOf("*") != -1) sendMessage(msg.chat.id, msg.message_id, row[0].lastAction, text);
            else sendMessage(msg.chat.id, msg.message_id, 'mainWindow');
          } else {
            /// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            myReferal = (msg.text.indexOf('/start ') != -1) ? msg.text.split('/start ')[1] : '';
            db.run(`INSERT INTO usersInfo (userID, firstName, userName, dateRegistration, balance, balanceDeposits, tempBalanceDeposit, lastAction, tempPromotion, tempPromotionCount, myReferal, earningTaskCount, referalsEarning, earningType, promotionsCount, adminEarning, balanceCashout, referalsCount) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`, [msg.chat.id, msg.from.first_name, msg.from.username, new Date().toString(), 0.00, '', '', 'mainWindow', '', '', myReferal, 0, 0, '', 0, 0.00, '', 0], async (err) => {
              if (!err) sendMessage(msg.chat.id, msg.message_id, 'mainWindow');
              if (myReferal != '') {
                row = await db_all(`SELECT referalsCount FROM usersInfo WHERE userID = ${myReferal}`).then(function(row) {return row});
                await db.run("UPDATE usersInfo SET referalsCount=? WHERE userID=?", [row[0].referalsCount + 1, Number(myReferal)],function(err,rows){});
                telegramBot.sendMessage(Number(myReferal), `${msg.from.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!`);
              }
            })
          }
        })
      })
    });
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegramBot.on('callback_query', function (msg) {
      db.serialize(() => {
        db.all(`SELECT userID, lastAction FROM usersInfo WHERE userID = ${msg.from.id}`, (err, row) => {
          if (row.length > 0) {
            /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sendMessage(msg.from.id, msg.message.message_id, msg.data);
            telegramBot.answerCallbackQuery(msg.id);
          } else {
            /// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.run(`INSERT INTO usersInfo (userID, firstName, userName, dateRegistration, balance, balanceDeposits, tempBalanceDeposit, lastAction, tempPromotion, tempPromotionCount, myReferal, earningTaskCount, referalsEarning, earningType, promotionsCount, adminEarning, balanceCashout, referalsCount) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`, [msg.from.id, msg.from.first_name, msg.from.username, new Date().toString(), 0.00, '', '', 'mainWindow', '', '', '', 0, 0, '', 0, 0.00, '', 0], async (err) => {
              if (!err) sendMessage(msg.from.id, msg.message_id, 'mainWindow');
            })
          }
        })
      })
    })
  }
})